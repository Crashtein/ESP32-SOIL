permissions:
  contents: write
  actions: read

name: Build and release
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - 'v*'

jobs:
  version:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/') && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))"
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v0.0.0 if none exists
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Increment version
        id: create_tag
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          # Remove 'v' prefix and split into array
          IFS='.' read -ra VERSION <<< "${latest_tag#v}"
          MAJOR=${VERSION[0]:-0}
          MINOR=${VERSION[1]:-0}
          PATCH=${VERSION[2]:-0}
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          
          # Create new tag
          new_tag="v$MAJOR.$MINOR.$PATCH"
          echo "New tag: $new_tag"
          echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
          
          # Create and push new tag
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a $new_tag -m "Release $new_tag"
          git push origin $new_tag

  build:
    needs: [version]
    if: always() && (startsWith(github.ref, 'refs/tags/') || success())
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Install PlatformIO libs and configure
      run: |
        pio lib install
        sed -i '/^#include <User_Setup.h>/a#include <User_Setups/Setup25_TTGO_T_Display.h>' .pio/libdeps/*/TFT_eSPI/User_Setup_Select.h
        sed -i 's|^#include <User_Setup.h>|//#include <User_Setup.h>|' .pio/libdeps/*/TFT_eSPI/User_Setup_Select.h


    # - name: Cache PlatformIO
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.platformio
    #     key: ${{ runner.os }}-platformio-${{ hashFiles('platformio.ini') }}
    #     restore-keys: |
    #       ${{ runner.os }}-platformio-

    - name: Build firmware
      run: pio run -e release
      env:
        PROJECT_VERSION: ${{ needs.version.outputs.new_tag || github.ref_name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: firmware
        path: .pio/build/release/firmware.bin
        if-no-files-found: error

  release:
    needs: [build, version]
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: firmware
        path: ./release

    - name: Create GitHub Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.new_tag || github.ref_name }}
        release_name: "Release ${{ needs.version.outputs.new_tag || github.ref_name }}"
        body: |
          Firmware release ${{ needs.version.outputs.new_tag || github.ref_name }}
          Build date: ${{ github.event.repository.updated_at }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./release/firmware.bin
        asset_name: firmware-${{ needs.version.outputs.new_tag || github.ref_name }}.bin
        asset_content_type: application/octet-stream

    - name: Update Latest Release
      run: |
        gh release delete latest --yes || true
        gh release create latest \
          --title "Latest Release" \
          --notes "This is an automatically updated release containing the latest firmware build from ${{ needs.version.outputs.new_tag || github.ref_name }}" \
          ./release/firmware.bin
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}