permissions:
  contents: write
  actions: read

name: Build and release

on:
  push:
    branches:
      - main
      - 'release/*'
    tags:
      - 'v*'

jobs:
  version:
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref, 'refs/tags/') && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))"
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get latest tag
        id: get_latest_tag
        shell: bash
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=${latest_tag}" >> "$GITHUB_OUTPUT"

      - name: Increment version
        id: create_tag
        shell: bash
        run: |
          latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          IFS='.' read -ra VERSION <<< "${latest_tag#v}"
          MAJOR=${VERSION[0]:-0}
          MINOR=${VERSION[1]:-0}
          PATCH=${VERSION[2]:-0}
          
          PATCH=$((PATCH + 1))
          new_tag="v$MAJOR.$MINOR.$PATCH"
          
          echo "New tag: $new_tag"
          echo "new_tag=${new_tag}" >> "$GITHUB_OUTPUT"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin "$new_tag"

  build:
    needs: [version]
    if: always() && (startsWith(github.ref, 'refs/tags/') || success())
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            .pio/build
          key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pio-

      - name: Install PlatformIO libs and configure
        run: |
          pio lib install
          sed -i '/^#include <User_Setup.h>/a#include <User_Setups/Setup25_TTGO_T_Display.h>' .pio/libdeps/*/TFT_eSPI/User_Setup_Select.h
          sed -i 's|^#include <User_Setup.h>|//#include <User_Setup.h>|' .pio/libdeps/*/TFT_eSPI/User_Setup_Select.h
          sed -i 's|backData && (backLen > 0)|backData != nullptr \&\& backLen != nullptr \&\& *backLen > 0|g' .pio/libdeps/*/MFRC522/src/MFRC522Extended.cpp

      - name: Build firmware
        run: pio run -e ${{ matrix.env }}
        env:
          PROJECT_VERSION: ${{ needs.version.outputs.new_tag || github.ref_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.env }}
          path: .pio/build/${{ matrix.env }}/firmware.bin
          if-no-files-found: error
          retention-days: 5

  pre-release:
    needs: [build, version]
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      latest_upload_url: ${{ steps.create-latest-release.outputs.upload_url }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Check if latest release exists
        id: check-latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view latest; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete Latest Release if exists
        if: steps.check-latest.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release delete latest --yes

      - name: Create Latest Release
        id: create-latest-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases \
            -f tag_name='latest' \
            -f name='Latest Release' \
            -f body="This is an automatically updated release containing the latest firmware build from ${{ needs.version.outputs.new_tag || github.ref_name }}" \
            -f draft=false \
            -f prerelease=false)
          echo "upload_url=$(echo $RESPONSE | jq -r .upload_url)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_TAG="${{ needs.version.outputs.new_tag || github.ref_name }}"
          RESPONSE=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases \
            -f tag_name="$VERSION_TAG" \
            -f name="Release $VERSION_TAG" \
            -f body="Firmware release $VERSION_TAG" \
            -f draft=false \
            -f prerelease=false)
          echo "upload_url=$(echo $RESPONSE | jq -r .upload_url)" >> $GITHUB_OUTPUT

  release:
    needs: [build, version, pre-release]
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, release]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firmware-${{ matrix.env }}
          path: ./release/${{ matrix.env }}

      - name: Upload Release Asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_TAG="${{ needs.version.outputs.new_tag || github.ref_name }}"
          gh release upload "$VERSION_TAG" "./release/${{ matrix.env }}/firmware.bin" \
            --clobber \
            --name "firmware-${{ matrix.env }}-${VERSION_TAG}.bin"

      - name: Upload Latest Release Asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload latest "./release/${{ matrix.env }}/firmware.bin" \
            --clobber \
            --name "firmware-${{ matrix.env }}.bin"